@{ ViewData["Title"] = "Переводчик"; }
<h1>Когнитивные службы Azure на примере переводчика</h1>
<p>Создание службы</p>
<ol>
    <li>
        Заходим на портал Azure
        (<a href="https://portal.azure.com/">сюда</a>)
    </li>
    <li>
        Выбираем "+" добавить службу.
        В строке поиска набираем "Translator".
        Переходим в добавление службы "Переводчик"
        (<a href="https://portal.azure.com/#create/Microsoft.CognitiveServicesTextTranslation">сюда</a>)
    </li>
    <li>
        Заполняем данные: выбираем подписку,
        задаем имя для службы,
        выбираем регион бизнес-интересов (Глобальный - без региона),
        выбираем ценовой план (F0 - бесплатно).
        Нажимаем "просмотр и создание" -- "создать" -- "перейти на службу"
    </li>
    <li>
        В окне службы переходим на вкладку "Keys and Endpoint",
        в ней необходимые данные для использования службы
    </li>
</ol>
<p>Использование службы</p>
<ol>
    <li>
        Создаем новую страницу (окно, приложение).
        В качестве констант (настроек, ini, env) переносим данные
        о ключе и точке подключения
    </li>
    <li>
        Находим документацию по конкретной службы (Переводчик)
        на сайте документов Microsoft
        (<a href="https://docs.microsoft.com/ru-ru/azure/cognitive-services/translator/quickstart-translator?tabs=csharp">здесь</a>")
    </li>
    <li>
        Уточняем все необходимые данные для запроса:
        <ul>
            <li>Метод</li>
            <li>Путь, в т.ч. ГЕТ-часть параметров</li>
            <li>Протокол</li>
            <li>Заголовки</li>
            <li>Тело (если есть)</li>
            <li>Структура (формат) ответа на запрос</li>
        </ul>
    </li>
</ol>

<form>
    Текст для перевода (EN) <input value="Hello, world!" name="txt" />
    <br />
    <button>Перевести</button>
    C
    <select id="translateFrom" name="translateFrom">
        <option value="en" selected>Английский</option>
        <option value="uk">Украинский</option>
        <option value="ru">Русский</option>
    </select>
    На
    <select id="translateTo" name="translateTo">
        <option value="en">Английский</option>
        <option value="uk" selected>Украинский</option>
        <option value="ru" selected >Русский</option>
    </select>
</form>

<p>
    <b>Результаты перевода:</b>
    <br />
    From: <i>Hello, world!</i>
    <br />
    UK: <i>@ViewData["ukTranslation"]</i>
    <br />
    RU: <i>@ViewData["ruTranslation"]</i>
    <br />
    Raw: <pre>@ViewData["resp"]</pre>

</p>
<hr />
<h2>SPA - перевод средствами JS</h2>
<span>Исходный язык</span>
<select id="sourceLang">
    <option value="en" selected>Английский</option>
    <option value="uk">Украинский</option>
    <option value="ru">Русский</option>
</select>
<br />
<textarea id="sourceText">How do you do</textarea>
<br />
<span>Язык перевода</span>
<select id="targetLang">
    <option value="en">Английский</option>
    <option value="uk" selected>Украинский</option>
    <option value="ru">Русский</option>
</select>
<br />
<button id="btnTranslate">Перевести</button>
<p id="targetText"></p>

<script>

    function translate(e) {
        let startSelection = window.getSelection().anchorOffset;
        let endSelection = window.getSelection().extentOffset;

        if (e.target.id != "btnTranslate" && startSelection == endSelection) {
            return;
        }

        const sourceLang = document.getElementById("sourceLang");
        if (!sourceLang) throw "sourceLang not found";
        const sourceText = document.getElementById("sourceText");
        if (!sourceText) throw "sourceText not found";
        const targetLang = document.getElementById("targetLang");
        if (!targetLang) throw "targetLang not found";
        const targetText = document.getElementById("targetText");
        if (!targetText) throw "targetText not found";

        const sLang = sourceLang.value;
        const tLang = targetLang.value;
        let sText = sourceText.value;
      
      
        if (startSelection != endSelection) {
            sText = window.getSelection().extentNode.data.substring(startSelection, endSelection);
        }
       

        console.log(sLang, tLang, sText);
        /*
        let res = await fetch("/Home/ApiKey").then(r=>r.text());
        console.log(res);
        return;
        */
        fetch("/Home/ApiKey")
            .then(r => r.json())
            .then(obj => {
                const endpoint = `https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&from=${sLang}&to=${tLang}`;
                const data = JSON.stringify([{ "Text": sText }]);
                try {
                    fetch(endpoint, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json; charset=UTF-8",
                            "Content-Length": data.length,
                            "Ocp-Apim-Subscription-Key": obj.Key,
                            "Ocp-Apim-Subscription-Region": obj.Region
                        },
                        body: data
                    }).then(r => r.json()).then((resp) => { if (resp[0].text != 0) console.log(resp[0].translations[0].text) });
                }
                catch (err) {
                    alert("Error the ability to convert is currently unavailable :(");
                }
            });
    }
    

    document.addEventListener("DOMContentLoaded",
        function () {
            const btnTranslate = document.getElementById("btnTranslate");
            if (!btnTranslate) throw "btnTranslate not found";
            btnTranslate.onclick = translate;
        });
    document.body.onmouseup = translate;
</script>